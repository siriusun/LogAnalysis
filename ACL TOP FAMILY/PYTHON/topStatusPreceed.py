#this py is used to insert rows to all ACL TOP status change: 
#If 2 status change between two hour clock, then insert 2 rows at end and start of every clock
#insert of 1 row before 2s at next status change
#ACL TOP status change raw data generated by : grep -aiE "'03046.*yyyy-mm-" T*.txt (* stand for sn)

import pandas as pd
import os
import datetime
import tkinter.filedialog as tk
import tkinter

while True:
    select_input = input(
        "How to Get Work Path:\n1 : Current Folder\n2 : Select one\n>>:")
    if select_input == "1":
        logpath = os.path.split(os.path.abspath(__file__))[0] + "/status.csv"
        break
    elif select_input == "2":
        root = tkinter.Tk()
        root.withdraw()
        logpath = tk.askdirectory() + "/status.csv"
        break
    else:
        print("Input 1 or 2")

print("\n")
print("*" * 150)
print("Log is>>:")
print(logpath)
print("*" * 150)
os.system("pause")

dt_start = datetime.datetime.now()

df1 = pd.read_csv(logpath, sep="\t", encoding="utf_8_sig", header=None, parse_dates=[2])

df1.drop([1,3,4,6,7,8,9],inplace=True,axis=1)
df1.rename(columns={0 : "sn", 2 : "dt", 5 : "status"},inplace=True)

replace_dic = {
    "开机": "Power up",
    "初始化": "Initializing",
    "维护": "Maintenance",
    "错误": "Error",
    "紧急停止": "Emergency stop",
    "忙": "Busy",
    "诊断": "Diagnostics",
    "准备": "Ready",
    "受控停机": "Controlled stop",
    "未连接": "Not connected",
    "温度调整": "Adjusting thermal",
    "变为": "to"
}

def replace_desp(desp):
    if "分析仪状态从" not in desp:
        return desp
    for (cn, en) in replace_dic.items():
        desp = desp.replace(cn, en)
    return desp

def status_extract(strs):
    index1 = strs.find(" to ")
    index2 = strs.find(".")
    return strs[index1 + 4 : index2]

def sn_extract(strs):
    index = strs.find(".txt")
    return strs[: index]

df1["status"] = df1["status"].map(replace_desp)

df1.status = df1.status.map(status_extract)
df1.sn = df1.sn.map(sn_extract)

df1["sn_n"] = df1["sn"].shift(-1)
df1["dt_n"] = df1["dt"].shift(-1)

df1.loc[df1.sn != df1.sn_n, "dt_n"] = df1["dt"]

df1.drop("sn_n",inplace=True,axis=1)

l = []

def insert_rows(df_row):
    global l
    if df_row["dt_n"] - df_row["dt"] < pd.Timedelta(3,"s"):
        l.append(df_row.to_dict())
    elif df_row.dt_n.strftime("%Y%m%d%H") == df_row["dt"].strftime("%Y%m%d%H"):
        l.append(df_row.to_dict())
        l.append({"sn" : df_row.sn, "dt" : df_row.dt_n - pd.Timedelta(2,"s"), "status" : df_row.status, "dt_n" : df_row.dt_n})
    else:
        l.append(df_row.to_dict())
        dt_tuple = df_row["dt"].timetuple()
        dt_n_tuple = df_row.dt_n.timetuple()
        dt_hourEnd = pd.Timestamp(dt_tuple.tm_year,dt_tuple.tm_mon,dt_tuple.tm_mday,dt_tuple.tm_hour) + pd.Timedelta('0 days 00:59:59.9')
        dt_n_hourStart = pd.Timestamp(dt_n_tuple.tm_year,dt_n_tuple.tm_mon,dt_n_tuple.tm_mday,dt_n_tuple.tm_hour)
        while dt_hourEnd < dt_n_hourStart:
            l.append({"sn" : df_row.sn, "dt" : dt_hourEnd, "status" : df_row.status, "dt_n" : df_row.dt_n})
            l.append({"sn" : df_row.sn, "dt" : dt_hourEnd + pd.Timedelta('0 days 00:00:0.11') , "status" : df_row.status, "dt_n" : df_row.dt_n})
            dt_hourEnd += pd.Timedelta('0 days 01:00:00')
        l.append({"sn" : df_row.sn, "dt" : df_row.dt_n - pd.Timedelta(2,"s"), "status" : df_row.status, "dt_n" : df_row.dt_n})



df1.apply(insert_rows,axis=1)

df1 = pd.DataFrame.from_records(l)

df1.drop("dt_n",axis=1,inplace=True)

df1["sn_n"] = df1["sn"].shift(-1)
df1["dt_n"] = df1["dt"].shift(-1)

df1 = df1[df1.sn_n == df1.sn]

df1.drop("sn_n",axis=1,inplace=True)

df1.loc[:,"periodH"] = (df1["dt_n"] - df1["dt"]) / pd.Timedelta(1,"h")
df1.loc[:,"periodM"] = (df1["dt_n"] - df1["dt"]) / pd.Timedelta(1,"m")
df1.loc[:,"date"] = df1["dt"].dt.strftime("%Y/%m/%d")
df1.loc[:,"weekday"] = df1["dt"].dt.weekday + 1
df1.loc[:,"hour"] = df1["dt"].dt.hour

df1.drop("dt_n",inplace=True,axis=1)

df1.reset_index(inplace=True,drop=True)

df1.to_csv(r"D:\Sync_ColorCloud\LogAnalysis\TOP working status analyis\status_ecg.csv")

print("status_ecg.csv has been created at: \nD:\Sync_ColorCloud\LogAnalysis\TOP working status analyis\status_ecg.csv")

spent_time =  datetime.datetime.now() - dt_start
print(spent_time)

os.system("pause")